/*  ---------------------------------------------------------------------------------------------------------------------------------------
 *  (C) 2019, Dr Warren Creemers.
 *  This file is subject to the terms and conditions defined in the included file 'LICENSE.txt'
 *  ---------------------------------------------------------------------------------------------------------------------------------------
 */
using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using System.ComponentModel;

using WD_toolbox.Maths.Complex;
using WD_toolbox.Maths.Range;
using WD_toolbox.Rendering.Colour;

namespace WD_toolbox.Rendering.Patterns
{
	/// <summary>
	/// A mandelbrot pattern generator.
	/// </summary>
	[DefaultPropertyAttribute("xPosition")]
	[Serializable]
	public class MandelbrotPattern : pattern
		{
		#region datatypes
		/// <summary>
		/// Pallates available for colorising the pattern.
		/// </summary>
		public enum paletteTypes {
			/// <summary>
			/// A blue pallate.
			/// </summary>
			blue=0,
			/// <summary>
			/// A red pallate.
			/// </summary>
			red,
			/// <summary>
			/// A green pallate.
			/// </summary>
			green,
			/// <summary>
			/// A rainbow pallate in pastel hues.
			/// </summary>
			rainbowPastel,
			/// <summary>
			/// A rainbow pallate using tich colours..
			/// </summary>
			rainbow
			};
		#endregion
		
		#region data
		private double _xPosition=-2.25;
		/// <summary>
		/// left position of the viewed region.
		/// </summary>
		[CategoryAttribute("Pattern"), 
		DescriptionAttribute("left position of the viewed region.")]
		public double xPosition
			{
			get
				{
				return _xPosition;
				}
			set
				{
				_xPosition = Range.clamp(value, -2.25, 0.75);
				}
			}
		
		
		private double _yPosition=-1.25;
		/// <summary>
		/// top position of the viewed region.
		/// </summary>
		[CategoryAttribute("Pattern"), 
		DescriptionAttribute("top position of the viewed region.")]
		public double yPosition
			{
			get
				{
				return _yPosition;
				}
			set
				{
				_yPosition = Range.clamp(value, -1.25, 1.25);
				}
			}
		
		
		private double _xWidth=3;
		/// <summary>
		/// width of the viewed region.
		/// </summary>
		[CategoryAttribute("Pattern"), 
		DescriptionAttribute("width of the viewed region.")]
		public double xWidth
			{
			get
				{
				return _xWidth;
				}
			set
				{
				_xWidth = Range.clamp(value,double.Epsilon*100, 3);
				}
			}
		
		
		private double _yWidth = 2.5;
		/// <summary>
		/// height of the viewed region.
		/// </summary>
		[CategoryAttribute("Pattern"), 
		DescriptionAttribute("height of the viewed region.")]
		public double yWidth
			{
			get
				{
				return _yWidth;
				}
			set
				{
				_yWidth = Range.clamp(value,double.Epsilon*100, 3);
				}
			}
		
		private paletteTypes _colorScheme = paletteTypes.rainbow;
		/// <summary>
		/// Colours to use <see cref="mandelbrotPattern.paletteTypes"/>
		/// </summary>
		[CategoryAttribute("Colours"), 
		DescriptionAttribute("Colours to use")]
		public paletteTypes colorScheme
			{
			get
				{
				return _colorScheme;
				}
			set
				{
				_colorScheme = value;
				}
			}
		
		private bool _reverseColorScheme = false;
		/// <summary>
		/// Set to true to reverse the color scheme
		/// </summary>
		[CategoryAttribute("Colours"), 
		DescriptionAttribute("Set to true to reverse the color scheme")]
		public bool reverseColorScheme
			{
			get
				{
				return _reverseColorScheme;
				}
			set
				{
				_reverseColorScheme = value;
				}
			}
		
		private bool _useCustomBackFill = true;
		/// <summary>
		/// Set to true if you wish to set a custom fill colour
		/// </summary>
		[CategoryAttribute("Colours"), 
		DescriptionAttribute("Set to true if you wish to set a custom fill colour")]
		public bool useCustomBackFill
			{
			get
				{
				return _useCustomBackFill;
				}
			set
				{
				_useCustomBackFill = value;
				}
			}
		
		private Color _backFill = Color.White;
		/// <summary>
		/// custom fill colour
		/// </summary>
		[CategoryAttribute("Colours"), 
		DescriptionAttribute("custom fill colour")]
		public Color backFill
			{
			get
				{
				return _backFill;
				}
			set
				{
				_backFill = value;
				}
			}
		
		#endregion
		
		#region static palettes
		byte[,,] palettes = new byte[5, 256, 3] 
		{
		{{0, 0, 255},{1, 1, 255},{2, 2, 255},{3, 3, 255},{4, 4, 255},{5, 5, 255},{6, 6, 255},{7, 7, 255},{8, 8, 255},{9, 9, 255},{10, 10, 255},{11, 11, 255},{12, 12, 255},{13, 13, 255},{14, 14, 255},{15, 15, 255},{16, 16, 255},{17, 17, 255},{18, 18, 255},{19, 19, 255},{20, 20, 255},{21, 21, 255},{22, 22, 255},{23, 23, 255},{24, 24, 255},{25, 25, 255},{26, 26, 255},{27, 27, 255},{28, 28, 255},{29, 29, 255},{30, 30, 255},{31, 31, 255},{32, 32, 255},{33, 33, 255},{34, 34, 255},{35, 35, 255},{36, 36, 255},{37, 37, 255},{38, 38, 255},{39, 39, 255},{40, 40, 255},{41, 41, 255},{42, 42, 255},{43, 43, 255},{44, 44, 255},{45, 45, 255},{46, 46, 255},{47, 47, 255},{48, 48, 255},{49, 49, 255},{50, 50, 255},{51, 51, 255},{52, 52, 255},{53, 53, 255},{54, 54, 255},{55, 55, 255},{56, 56, 255},{57, 57, 255},{58, 58, 255},{59, 59, 255},{60, 60, 255},{61, 61, 255},{62, 62, 255},{63, 63, 255},{64, 64, 255},{65, 65, 255},{66, 66, 255},{67, 67, 255},{68, 68, 255},{69, 69, 255},{70, 70, 255},{71, 71, 255},{72, 72, 255},{73, 73, 255},{74, 74, 255},{75, 75, 255},{76, 76, 255},{77, 77, 255},{78, 78, 255},{79, 79, 255},{80, 80, 255},{81, 81, 255},{82, 82, 255},{83, 83, 255},{84, 84, 255},{85, 85, 255},{86, 86, 255},{87, 87, 255},{88, 88, 255},{89, 89, 255},{90, 90, 255},{91, 91, 255},{92, 92, 255},{93, 93, 255},{94, 94, 255},{95, 95, 255},{96, 96, 255},{97, 97, 255},{98, 98, 255},{99, 99, 255},{100, 100, 255},{101, 101, 255},{102, 102, 255},{103, 103, 255},{104, 104, 255},{105, 105, 255},{106, 106, 255},{107, 107, 255},{108, 108, 255},{109, 109, 255},{110, 110, 255},{111, 111, 255},{112, 112, 255},{113, 113, 255},{114, 114, 255},{115, 115, 255},{116, 116, 255},{117, 117, 255},{118, 118, 255},{119, 119, 255},{120, 120, 255},{121, 121, 255},{122, 122, 255},{123, 123, 255},{124, 124, 255},{125, 125, 255},{126, 126, 255},{127, 127, 255},{128, 128, 255},{129, 129, 255},{130, 130, 255},{131, 131, 255},{132, 132, 255},{133, 133, 255},{134, 134, 255},{135, 135, 255},{136, 136, 255},{137, 137, 255},{138, 138, 255},{139, 139, 255},
		{140, 140, 255},{141, 141, 255},{142, 142, 255},{143, 143, 255},{144, 144, 255},{145, 145, 255},{146, 146, 255},{147, 147, 255},{148, 148, 255},{149, 149, 255},{150, 150, 255},{151, 151, 255},{152, 152, 255},{153, 153, 255},{154, 154, 255},{155, 155, 255},{156, 156, 255},{157, 157, 255},{158, 158, 255},{159, 159, 255},{160, 160, 255},{161, 161, 255},{162, 162, 255},{163, 163, 255},{164, 164, 255},{165, 165, 255},{166, 166, 255},{167, 167, 255},{168, 168, 255},{169, 169, 255},{170, 170, 255},{171, 171, 255},{172, 172, 255},{173, 173, 255},{174, 174, 255},{175, 175, 255},{176, 176, 255},{177, 177, 255},{178, 178, 255},{179, 179, 255},{180, 180, 255},{181, 181, 255},{182, 182, 255},{183, 183, 255},{184, 184, 255},{185, 185, 255},{186, 186, 255},{187, 187, 255},{188, 188, 255},{189, 189, 255},{190, 190, 255},{191, 191, 255},{192, 192, 255},{193, 193, 255},{194, 194, 255},{195, 195, 255},{196, 196, 255},{197, 197, 255},{198, 198, 255},{199, 199, 255},{200, 200, 255},{201, 201, 255},{202, 202, 255},{203, 203, 255},{204, 204, 255},{205, 205, 255},{206, 206, 255},{207, 207, 255},{208, 208, 255},{209, 209, 255},{210, 210, 255},{211, 211, 255},{212, 212, 255},{213, 213, 255},{214, 214, 255},{215, 215, 255},{216, 216, 255},{217, 217, 255},{218, 218, 255},{219, 219, 255},{220, 220, 255},{221, 221, 255},{222, 222, 255},{223, 223, 255},{224, 224, 255},{225, 225, 255},{226, 226, 255},{227, 227, 255},{228, 228, 255},{229, 229, 255},{230, 230, 255},{231, 231, 255},{232, 232, 255},{233, 233, 255},{234, 234, 255},{235, 235, 255},{236, 236, 255},{237, 237, 255},{238, 238, 255},{239, 239, 255},{240, 240, 255},{241, 241, 255},{242, 242, 255},{243, 243, 255},{244, 244, 255},{245, 245, 255},{246, 246, 255},{247, 247, 255},{248, 248, 255},{249, 249, 255},{250, 250, 255},{251, 251, 255},{252, 252, 255},{253, 253, 255},{254, 254, 255},{255, 255, 255}},
		
		{{255, 0, 0},{255, 1, 1},{255, 2, 2},{255, 3, 3},{255, 4, 4},{255, 5, 5},{255, 6, 6},{255, 7, 7},{255, 8, 8},{255, 9, 9},{255, 10, 10},{255, 11, 11},{255, 12, 12},{255, 13, 13},{255, 14, 14},{255, 15, 15},{255, 16, 16},{255, 17, 17},{255, 18, 18},{255, 19, 19},{255, 20, 20},{255, 21, 21},{255, 22, 22},{255, 23, 23},{255, 24, 24},{255, 25, 25},{255, 26, 26},{255, 27, 27},{255, 28, 28},{255, 29, 29},{255, 30, 30},{255, 31, 31},{255, 32, 32},{255, 33, 33},{255, 34, 34},{255, 35, 35},{255, 36, 36},{255, 37, 37},{255, 38, 38},{255, 39, 39},{255, 40, 40},{255, 41, 41},{255, 42, 42},{255, 43, 43},{255, 44, 44},{255, 45, 45},{255, 46, 46},{255, 47, 47},{255, 48, 48},{255, 49, 49},{255, 50, 50},{255, 51, 51},{255, 52, 52},{255, 53, 53},{255, 54, 54},{255, 55, 55},{255, 56, 56},{255, 57, 57},{255, 58, 58},{255, 59, 59},{255, 60, 60},{255, 61, 61},{255, 62, 62},{255, 63, 63},{255, 64, 64},{255, 65, 65},{255, 66, 66},{255, 67, 67},{255, 68, 68},{255, 69, 69},{255, 70, 70},{255, 71, 71},{255, 72, 72},{255, 73, 73},{255, 74, 74},{255, 75, 75},{255, 76, 76},{255, 77, 77},{255, 78, 78},{255, 79, 79},{255, 80, 80},{255, 81, 81},{255, 82, 82},{255, 83, 83},{255, 84, 84},{255, 85, 85},{255, 86, 86},{255, 87, 87},{255, 88, 88},{255, 89, 89},{255, 90, 90},{255, 91, 91},{255, 92, 92},{255, 93, 93},{255, 94, 94},{255, 95, 95},{255, 96, 96},{255, 97, 97},{255, 98, 98},{255, 99, 99},{255, 100, 100},{255, 101, 101},{255, 102, 102},{255, 103, 103},{255, 104, 104},{255, 105, 105},{255, 106, 106},{255, 107, 107},{255, 108, 108},{255, 109, 109},{255, 110, 110},{255, 111, 111},{255, 112, 112},{255, 113, 113},{255, 114, 114},{255, 115, 115},{255, 116, 116},{255, 117, 117},{255, 118, 118},{255, 119, 119},{255, 120, 120},{255, 121, 121},{255, 122, 122},{255, 123, 123},{255, 124, 124},{255, 125, 125},{255, 126, 126},{255, 127, 127},{255, 128, 128},{255, 129, 129},{255, 130, 130},{255, 131, 131},{255, 132, 132},{255, 133, 133},{255, 134, 134},{255, 135, 135},{255, 136, 136},{255, 137, 137},{255, 138, 138},{255, 139, 139},
		{255, 140, 140},{255, 141, 141},{255, 142, 142},{255, 143, 143},{255, 144, 144},{255, 145, 145},{255, 146, 146},{255, 147, 147},{255, 148, 148},{255, 149, 149},{255, 150, 150},{255, 151, 151},{255, 152, 152},{255, 153, 153},{255, 154, 154},{255, 155, 155},{255, 156, 156},{255, 157, 157},{255, 158, 158},{255, 159, 159},{255, 160, 160},{255, 161, 161},{255, 162, 162},{255, 163, 163},{255, 164, 164},{255, 165, 165},{255, 166, 166},{255, 167, 167},{255, 168, 168},{255, 169, 169},{255, 170, 170},{255, 171, 171},{255, 172, 172},{255, 173, 173},{255, 174, 174},{255, 175, 175},{255, 176, 176},{255, 177, 177},{255, 178, 178},{255, 179, 179},{255, 180, 180},{255, 181, 181},{255, 182, 182},{255, 183, 183},{255, 184, 184},{255, 185, 185},{255, 186, 186},{255, 187, 187},{255, 188, 188},{255, 189, 189},{255, 190, 190},{255, 191, 191},{255, 192, 192},{255, 193, 193},{255, 194, 194},{255, 195, 195},{255, 196, 196},{255, 197, 197},{255, 198, 198},{255, 199, 199},{255, 200, 200},{255, 201, 201},{255, 202, 202},{255, 203, 203},{255, 204, 204},{255, 205, 205},{255, 206, 206},{255, 207, 207},{255, 208, 208},{255, 209, 209},{255, 210, 210},{255, 211, 211},{255, 212, 212},{255, 213, 213},{255, 214, 214},{255, 215, 215},{255, 216, 216},{255, 217, 217},{255, 218, 218},{255, 219, 219},{255, 220, 220},{255, 221, 221},{255, 222, 222},{255, 223, 223},{255, 224, 224},{255, 225, 225},{255, 226, 226},{255, 227, 227},{255, 228, 228},{255, 229, 229},{255, 230, 230},{255, 231, 231},{255, 232, 232},{255, 233, 233},{255, 234, 234},{255, 235, 235},{255, 236, 236},{255, 237, 237},{255, 238, 238},{255, 239, 239},{255, 240, 240},{255, 241, 241},{255, 242, 242},{255, 243, 243},{255, 244, 244},{255, 245, 245},{255, 246, 246},{255, 247, 247},{255, 248, 248},{255, 249, 249},{255, 250, 250},{255, 251, 251},{255, 252, 252},{255, 253, 253},{255, 254, 254},{255, 255, 255}},
		
		{{0, 255, 0},{1, 255, 1},{2, 255, 2},{3, 255, 3},{4, 255, 4},{5, 255, 5},{6, 255, 6},{7, 255, 7},{8, 255, 8},{9, 255, 9},{10, 255, 10},{11, 255, 11},{12, 255, 12},{13, 255, 13},{14, 255, 14},{15, 255, 15},{16, 255, 16},{17, 255, 17},{18, 255, 18},{19, 255, 19},{20, 255, 20},{21, 255, 21},{22, 255, 22},{23, 255, 23},{24, 255, 24},{25, 255, 25},{26, 255, 26},{27, 255, 27},{28, 255, 28},{29, 255, 29},{30, 255, 30},{31, 255, 31},{32, 255, 32},{33, 255, 33},{34, 255, 34},{35, 255, 35},{36, 255, 36},{37, 255, 37},{38, 255, 38},{39, 255, 39},{40, 255, 40},{41, 255, 41},{42, 255, 42},{43, 255, 43},{44, 255, 44},{45, 255, 45},{46, 255, 46},{47, 255, 47},{48, 255, 48},{49, 255, 49},{50, 255, 50},{51, 255, 51},{52, 255, 52},{53, 255, 53},{54, 255, 54},{55, 255, 55},{56, 255, 56},{57, 255, 57},{58, 255, 58},{59, 255, 59},{60, 255, 60},{61, 255, 61},{62, 255, 62},{63, 255, 63},{64, 255, 64},{65, 255, 65},{66, 255, 66},{67, 255, 67},{68, 255, 68},{69, 255, 69},{70, 255, 70},{71, 255, 71},{72, 255, 72},{73, 255, 73},{74, 255, 74},{75, 255, 75},{76, 255, 76},{77, 255, 77},{78, 255, 78},{79, 255, 79},{80, 255, 80},{81, 255, 81},{82, 255, 82},{83, 255, 83},{84, 255, 84},{85, 255, 85},{86, 255, 86},{87, 255, 87},{88, 255, 88},{89, 255, 89},{90, 255, 90},{91, 255, 91},{92, 255, 92},{93, 255, 93},{94, 255, 94},{95, 255, 95},{96, 255, 96},{97, 255, 97},{98, 255, 98},{99, 255, 99},{100, 255, 100},{101, 255, 101},{102, 255, 102},{103, 255, 103},{104, 255, 104},{105, 255, 105},{106, 255, 106},{107, 255, 107},{108, 255, 108},{109, 255, 109},{110, 255, 110},{111, 255, 111},{112, 255, 112},{113, 255, 113},{114, 255, 114},{115, 255, 115},{116, 255, 116},{117, 255, 117},{118, 255, 118},{119, 255, 119},{120, 255, 120},{121, 255, 121},{122, 255, 122},{123, 255, 123},{124, 255, 124},{125, 255, 125},{126, 255, 126},{127, 255, 127},{128, 255, 128},{129, 255, 129},{130, 255, 130},{131, 255, 131},{132, 255, 132},{133, 255, 133},{134, 255, 134},{135, 255, 135},{136, 255, 136},{137, 255, 137},{138, 255, 138},{139, 255, 139},
		{140, 255, 140},{141, 255, 141},{142, 255, 142},{143, 255, 143},{144, 255, 144},{145, 255, 145},{146, 255, 146},{147, 255, 147},{148, 255, 148},{149, 255, 149},{150, 255, 150},{151, 255, 151},{152, 255, 152},{153, 255, 153},{154, 255, 154},{155, 255, 155},{156, 255, 156},{157, 255, 157},{158, 255, 158},{159, 255, 159},{160, 255, 160},{161, 255, 161},{162, 255, 162},{163, 255, 163},{164, 255, 164},{165, 255, 165},{166, 255, 166},{167, 255, 167},{168, 255, 168},{169, 255, 169},{170, 255, 170},{171, 255, 171},{172, 255, 172},{173, 255, 173},{174, 255, 174},{175, 255, 175},{176, 255, 176},{177, 255, 177},{178, 255, 178},{179, 255, 179},{180, 255, 180},{181, 255, 181},{182, 255, 182},{183, 255, 183},{184, 255, 184},{185, 255, 185},{186, 255, 186},{187, 255, 187},{188, 255, 188},{189, 255, 189},{190, 255, 190},{191, 255, 191},{192, 255, 192},{193, 255, 193},{194, 255, 194},{195, 255, 195},{196, 255, 196},{197, 255, 197},{198, 255, 198},{199, 255, 199},{200, 255, 200},{201, 255, 201},{202, 255, 202},{203, 255, 203},{204, 255, 204},{205, 255, 205},{206, 255, 206},{207, 255, 207},{208, 255, 208},{209, 255, 209},{210, 255, 210},{211, 255, 211},{212, 255, 212},{213, 255, 213},{214, 255, 214},{215, 255, 215},{216, 255, 216},{217, 255, 217},{218, 255, 218},{219, 255, 219},{220, 255, 220},{221, 255, 221},{222, 255, 222},{223, 255, 223},{224, 255, 224},{225, 255, 225},{226, 255, 226},{227, 255, 227},{228, 255, 228},{229, 255, 229},{230, 255, 230},{231, 255, 231},{232, 255, 232},{233, 255, 233},{234, 255, 234},{235, 255, 235},{236, 255, 236},{237, 255, 237},{238, 255, 238},{239, 255, 239},{240, 255, 240},{241, 255, 241},{242, 255, 242},{243, 255, 243},{244, 255, 244},{245, 255, 245},{246, 255, 246},{247, 255, 247},{248, 255, 248},{249, 255, 249},{250, 255, 250},{251, 255, 251},{252, 255, 252},{253, 255, 253},{254, 255, 254},{255, 255, 255}},
		
		{{145, 149, 255},{149, 148, 255},{145, 153, 255},{145, 157, 255},{153, 148, 255},{157, 148, 255},{145, 161, 255},{145, 166, 255},{145, 170, 255},{145, 173, 255},{145, 177, 255},{145, 181, 255},{145, 185, 255},{145, 189, 255},{161, 148, 255},{165, 147, 255},{170, 147, 255},{174, 147, 255},{177, 147, 255},{181, 147, 255},{185, 147, 255},{189, 147, 255},{145, 255, 145},{145, 255, 146},{146, 255, 145},{145, 255, 148},{145, 255, 150},{149, 255, 145},{150, 255, 145},{145, 255, 152},{145, 255, 154},{145, 255, 156},{145, 255, 158},{152, 255, 145},{154, 255, 145},{156, 255, 145},{158, 255, 145},{145, 255, 160},{145, 255, 162},{145, 255, 164},{145, 255, 166},{145, 255, 168},{145, 255, 170},{145, 255, 172},{145, 255, 174},{145, 255, 176},{145, 255, 178},{145, 255, 180},{145, 255, 182},{145, 255, 185},{145, 255, 189},{160, 255, 145},{162, 255, 145},{164, 255, 145},{166, 255, 145},{168, 255, 145},{170, 255, 145},{172, 255, 145},{174, 255, 145},{176, 255, 145},{178, 255, 145},{180, 255, 145},{183, 255, 145},{184, 255, 145},{186, 255, 145},{188, 255, 145},{190, 255, 145},{145, 193, 255},{145, 197, 255},{145, 201, 254},{145, 205, 254},{145, 209, 254},{145, 213, 254},{145, 217, 254},{145, 221, 254},{145, 255, 193},{145, 255, 197},{145, 255, 201},{145, 255, 205},{145, 255, 209},{145, 255, 213},{145, 255, 217},{145, 255, 221},{145, 225, 254},{145, 229, 254},{145, 233, 254},{145, 237, 254},{145, 255, 225},{145, 255, 229},{145, 255, 233},{145, 255, 237},{145, 241, 254},{145, 245, 254},{145, 255, 242},{145, 255, 246},{145, 249, 254},{145, 255, 250},{145, 254, 253},{255, 145, 145},{255, 145, 146},{255, 146, 145},{255, 145, 148},{255, 145, 150},{255, 148, 145},{255, 150, 145},{255, 145, 152},{255, 145, 154},{255, 145, 156},{255, 145, 158},{255, 152, 145},{255, 154, 145},{255, 156, 145},{255, 158, 145},{255, 145, 160},{255, 145, 162},{255, 145, 165},{255, 145, 166},{255, 145, 168},{255, 145, 170},{255, 145, 172},{255, 145, 175},{255, 145, 176},{255, 145, 178},{255, 145, 180},{255, 145, 182},{255, 145, 185},
		{255, 145, 186},{255, 145, 188},{255, 145, 190},{255, 160, 145},{255, 162, 145},{255, 164, 145},{255, 166, 145},{255, 168, 145},{255, 170, 145},{255, 172, 145},{255, 174, 145},{255, 176, 145},{255, 178, 145},{255, 180, 145},{255, 182, 145},{255, 184, 145},{255, 186, 145},{255, 188, 145},{255, 190, 145},{193, 147, 255},{197, 147, 255},{201, 146, 255},{205, 146, 255},{209, 146, 255},{213, 146, 255},{217, 146, 255},{221, 146, 255},{255, 145, 192},{255, 145, 194},{255, 145, 196},{255, 145, 198},{254, 145, 200},{254, 145, 202},{254, 145, 204},{254, 145, 206},{254, 145, 208},{254, 145, 210},{254, 145, 212},{254, 145, 214},{254, 145, 216},{254, 145, 219},{254, 145, 220},{254, 145, 222},{225, 146, 255},{229, 146, 255},{233, 146, 255},{238, 145, 255},{254, 145, 224},{254, 145, 226},{254, 145, 229},{254, 145, 230},{254, 145, 232},{254, 145, 234},{254, 145, 236},{254, 145, 239},{242, 145, 255},{245, 145, 255},{254, 145, 240},{254, 145, 242},{254, 145, 244},{254, 145, 246},{249, 145, 255},{254, 145, 248},{254, 145, 250},{252, 145, 255},{254, 145, 252},{254, 145, 254},{193, 255, 145},{194, 255, 145},{196, 255, 145},{198, 255, 145},{200, 254, 145},{203, 254, 145},{204, 254, 145},{206, 254, 145},{208, 254, 145},{210, 254, 145},{212, 254, 145},{214, 254, 145},{216, 254, 145},{218, 254, 145},{220, 254, 145},{222, 254, 145},{255, 192, 145},{255, 194, 145},{255, 196, 145},{255, 198, 145},{255, 200, 145},{255, 202, 145},{255, 204, 145},{255, 206, 145},{255, 208, 145},{255, 210, 145},{255, 212, 145},{255, 214, 145},{255, 216, 145},{255, 218, 145},{255, 220, 145},{255, 222, 145},{224, 254, 145},{226, 254, 145},{228, 254, 145},{230, 254, 145},{232, 254, 145},{234, 254, 145},{237, 254, 145},{238, 254, 145},{255, 224, 145},{255, 226, 145},{255, 228, 145},{255, 230, 145},{255, 232, 145},{255, 234, 145},{255, 236, 145},{255, 238, 145},{240, 254, 145},{242, 254, 145},{244, 254, 145},{247, 254, 145},{255, 240, 145},{255, 242, 145},{255, 244, 145},{255, 246, 145},{248, 254, 145},{250, 254, 145},{255, 248, 145},
		{255, 250, 145},{252, 254, 145},{255, 252, 145},{254, 254, 145}},
		
		{{250, 0, 5},{245, 0, 10},{241, 0, 14},{233, 0, 21},{237, 0, 18},{226, 0, 29},{221, 0, 34},{217, 0, 38},{209, 0, 45},{212, 0, 43},{205, 0, 49},{202, 0, 53},{193, 0, 61},{197, 0, 58},{189, 0, 65},{185, 0, 69},{179, 0, 75},{177, 0, 78},{173, 0, 81},{169, 0, 85},{164, 0, 90},{161, 0, 93},{159, 0, 95},{156, 0, 98},{154, 0, 100},{149, 0, 105},{145, 0, 109},{141, 0, 113},{139, 0, 115},{136, 0, 118},{131, 0, 123},{129, 0, 125},{125, 0, 128},{128, 0, 128},{121, 0, 128},{115, 0, 128},{107, 0, 128},{99, 0, 128},{91, 0, 128},{83, 0, 128},{75, 0, 128},{67, 0, 128},{59, 0, 128},{51, 0, 128},{43, 0, 128},{35, 0, 128},{27, 0, 128},{19, 0, 128},{11, 0, 128},{2, 0, 129},{0, 0, 139},{0, 0, 147},{0, 0, 155},{0, 0, 163},{0, 0, 171},{0, 0, 179},{0, 0, 187},{0, 0, 195},{0, 0, 203},{0, 0, 211},{0, 0, 219},{0, 0, 227},{0, 0, 235},{0, 0, 251},{0, 1, 243},{0, 9, 242},{0, 13, 237},{0, 17, 233},{0, 20, 228},{0, 26, 220},{0, 31, 214},{0, 33, 210},{0, 38, 205},{0, 41, 201},{0, 45, 195},{0, 50, 188},{0, 54, 182},{0, 57, 178},{0, 61, 173},{0, 64, 169},{0, 69, 163},{0, 75, 155},{0, 79, 150},{0, 81, 146},{0, 85, 141},{0, 88, 137},{0, 92, 131},{0, 96, 128},{0, 100, 122},{0, 103, 118},{0, 106, 113},{0, 110, 109},{0, 113, 105},{0, 117, 100},{0, 120, 96},{0, 123, 91},{0, 127, 87},{0, 130, 82},{0, 134, 77},{0, 137, 73},{0, 140, 68},{0, 144, 64},{0, 146, 60},{0, 150, 54},{0, 153, 51},{0, 157, 46},{0, 159, 43},{0, 161, 41},{0, 162, 38},{0, 164, 37},{0, 166, 34},{0, 168, 32},{0, 170, 29},{0, 175, 22},{0, 173, 25},{0, 178, 18},{0, 176, 20},{0, 180, 16},{0, 182, 13},{0, 184, 10},{0, 187, 7},{0, 190, 2},{0, 188, 4},{2, 192, 0},{5, 193, 0},{10, 194, 0},{13, 195, 0},{15, 196, 0},{18, 196, 0},{22, 197, 0},{25, 198, 0},{29, 199, 0},{32, 200, 0},{37, 201, 0},{41, 202, 0},{45, 203, 0},{47, 204, 0},{49, 204, 0},{54, 205, 0},{58, 206, 0},{62, 207, 0},{63, 208, 0},{65, 208, 0},{68, 209, 0},{73, 210, 0},{76, 211, 0},{81, 212, 0},{84, 213, 0},{89, 214, 0},{93, 215, 0},{98, 216, 0},{102, 217, 0},{106, 218, 0},{109, 219, 0},{112, 220, 0},
		{117, 221, 0},{120, 222, 0},{125, 223, 0},{129, 224, 0},{133, 225, 0},{137, 226, 0},{142, 227, 0},{146, 228, 0},{150, 229, 0},{153, 229, 0},{157, 230, 0},{161, 232, 0},{164, 233, 0},{169, 234, 0},{173, 235, 0},{177, 236, 0},{181, 237, 0},{186, 238, 0},{189, 239, 0},{192, 239, 0},{194, 240, 0},{197, 240, 0},{201, 241, 0},{205, 242, 0},{208, 243, 0},{210, 244, 0},{213, 244, 0},{217, 245, 0},{222, 246, 0},{225, 248, 0},{229, 249, 0},{233, 249, 0},{237, 250, 0},{240, 251, 0},{242, 252, 0},{245, 252, 0},{249, 253, 0},{255, 249, 0},{254, 253, 0},{255, 246, 0},{255, 237, 0},{255, 241, 0},{255, 234, 0},{255, 225, 0},{255, 229, 0},{255, 221, 0},{255, 213, 0},{255, 217, 0},{255, 209, 0},{255, 201, 0},{255, 205, 0},{255, 193, 0},{255, 197, 0},{255, 189, 1},{255, 181, 1},{255, 186, 1},{255, 177, 1},{255, 169, 1},{255, 173, 1},{255, 165, 1},{255, 158, 1},{255, 161, 1},{255, 153, 1},{255, 146, 1},{255, 149, 1},{255, 141, 1},{255, 134, 1},{255, 137, 1},{255, 125, 1},{255, 129, 1},{255, 121, 1},{255, 113, 1},{255, 117, 1},{255, 109, 1},{255, 101, 1},{255, 106, 1},{255, 98, 1},{255, 89, 1},{255, 93, 1},{255, 85, 1},{255, 77, 1},{255, 81, 1},{255, 70, 1},{255, 73, 1},{255, 66, 0},{255, 56, 0},{255, 61, 0},{255, 53, 0},{255, 45, 0},{255, 49, 0},{255, 41, 0},{255, 33, 0},{255, 37, 0},{255, 25, 0},{255, 29, 0},{255, 21, 0},{255, 14, 0},{255, 17, 0},{255, 10, 0},{254, 1, 0},{255, 6, 0}},
		};
		#endregion
		
		/// <summary>
		/// Creates a new 
		/// </summary>
		public MandelbrotPattern()
			{
			}
		
		/// <summary>
		/// Applies the pattern described in this object to the specified bitmap.
		/// </summary>
		/// <param name="b">A bitmap to apply the pattern to.</param>
		/// <remarks>For speed critical operation use this function with a preallocated bitmap rather than call makeBitmap. <see cref="pattern.makeBitmap"/></remarks>
		public override void applyPattern(ref Bitmap myBitmap)
			{
			//double xStart=-2.25, yStart=-1.25, xEnd=0.75, yEnd=1.25;
			//double dx = xEnd-xStart, dy = yEnd-yStart;
			//double fx = xStart+percent1*dx;
			//double fy = yStart+percent2*dy;
			double xStart = xPosition;
			double xEnd = xPosition+xWidth;
			double yStart = yPosition;
			double yEnd = yPosition+yWidth;
			
			
			//int width=(int)g.ClipBounds.Width, height=(int)g.ClipBounds.Height;
			double xStep, yStep, xPos=xStart, yPos=yStart;
			//Bitmap myBitmap = new Bitmap(width, height);
			
			xStep = (xEnd - xStart) / ((double)myBitmap.Width);
			yStep = (yEnd - yStart) / ((double)myBitmap.Height);
			Complex z = new Complex(0,0);
			byte[,,] myData = new byte[myBitmap.Width, myBitmap.Height,3];
			
			unsafe
			{
			fixed (byte *pDataStart = &myData[0,0,0])
			{
			byte *pData = pDataStart;
			double oldY;
			int i, j, c;
			for(i=0;i<myBitmap.Width;i++)
				{
				yPos = yStart;
				for(j=0;j<myBitmap.Height;j++)
					{
					// the fractal function
					z.x = xPos;
					z.y = yPos;
					c=0;
					while((c<255) && (((z.x*z.x)+(z.y*z.y))<4.0))
						{
						//z = z.getSqr();// + z;
					
						oldY = z.y*z.y;
						z.y *= z.x+z.x;
						z.x = (z.x*z.x) - oldY;
						
						z.x += xPos;
						z.y += yPos;
						c++;
						}
					// write the pixel
					if((c==0) && (_useCustomBackFill))
						{
						//myBitmap.SetPixel(i,j,Color.FromArgb(0,0,255));
						myBitmap.SetPixel(i,j, _backFill);
						}
					else
						{
						int c2 =  c*c;
						if (c2 >255)
							c2 = 255;
						//myBitmap.SetPixel(i,j,Color.FromArgb(c2,c,255-c));
						int c3 = c2;
						if(_reverseColorScheme)
							{
							c3 = 255-c2;
							if (c3 <0)
								c2 = 0;
							}
						
						if (c3 >255)
							c3 = 255;
						
						myBitmap.SetPixel(i, j, Color.FromArgb(palettes[(int)colorScheme, c3, 0], palettes[(int)colorScheme, c3, 1], palettes[(int)colorScheme, c3, 2]));						
						}
					yPos += yStep;
					}
				xPos += xStep;
				}
			//myBitmap = new Bitmap(width,height,width,PixelFormat.Format24bppRgb, (IntPtr)pDataStart);
			}}
			//return myBitmap;
			//g.DrawImageUnscaled(myBitmap ,0,0);
			}
			
		
		/// <summary>
		/// Makes a clone of this object.
		/// </summary>
		/// <returns>A clone of this object.</returns>
		public override pattern clone()
			{
			MandelbrotPattern p = new MandelbrotPattern();
			p.xPosition = xPosition;
			p.xWidth = xWidth;
			p.yPosition = yPosition;
			p.yWidth = yWidth;
			p.backFill = backFill;
			p.colorScheme = colorScheme;
			p.reverseColorScheme = reverseColorScheme;
			p.useCustomBackFill = useCustomBackFill;
			return (pattern)p;
			}
		}
}
